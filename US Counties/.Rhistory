library(tidyverse)
co.est2019.alldata <- read.csv("E:/QGIS/Data/US Census Bureau/co-est2019-alldata.csv")
View(co.est2019.alldata)
#Getting long and lat data
library(maps)
library(ggmap)
library(mapdata)
states <- map_data("state")
View(states)
counties <- map_data("county")
rm(states)
View(counties)
View(co.est2019.alldata)
View(counties)
#Trying usmap package
install.packages("usmap")
library(usmap)
View(countypop)
#
plot_usmap(regions = "counties")
windows()
plot_usmap(regions = "counties")
library(leaflet)
windows()
leaflet %>%
plot_usmap(regions = "counties")
library(rgeos)
install.packages(c("maptools", "rgeos"))
library(rgeos)
library(maptools)
# bringing in a shape file
shapefiledata <- readShapeSpatial("E:\QGIS\Data\US Census Bureau\cb_2019_us_county_500k")
# bringing in a shape file
shapefiledata <- readShapeSpatial("E:\\QGIS\\Data\\US Census Bureau\\cb_2019_us_county_500k")
# bringing in a shape file
shapefiledata <- readShapeSpatial("E:\\QGIS\\Data\\US Census Bureau\cb_2019_us_county_500k")
# bringing in a shape file
shapefiledata <- readShapeSpatial("E:\\QGIS\\Data\\US Census Bureau\\cb_2019_us_county_500k")
# bringing in a shape file
shapefiledata <- readShapeSpatial("E:\\QGIS\\Data\\US Census Bureau\\cb_2019_us_county_500k.shp")
install.packages("sf")
library(sf)
# bringing in a shape file
shapefiledata <- readShapeSpatial("E:\\QGIS\\Data\\US Census Bureau\\cb_2019_us_county_500k.shp")
?st_read
install.packages("rgdal")
library(rgdal)
getwd()
# bringing in a shape file using sf package
require(sf)
shapefiledata <- read_sf(dsn = ".", layer = "cb_2019_us_county_500k")
require(rgdal)
shapefiledata <- readOGR(dsn = ".", layer = "cb_2019_us_county_500k")
library(acs)
acs::fips.county
View(co.est2019.alldata)
View(acs::fips.county)
shapefiledata <- readOGR(dsn = "E:\QGIS\Data\US Census Bureau\cb_2019_us_county_500k",
layer = "cb_2019_us_county_500k")
shapefiledata <- readOGR(dsn = "E:\\QGIS\Data\US Census Bureau\cb_2019_us_county_500k",
layer = "cb_2019_us_county_500k")
shapefiledata <- readOGR(dsn = "E:\\QGIS\\Data\\US Census Bureau\\cb_2019_us_county_500k",
layer = "cb_2019_us_county_500k")
View(shapefiledata)
windows()
leaflet(shapefiledata) %>%
addPolygons()
summary(shapefiledata)
View(acs::fips.county)
summary(shapefiledata$NAME)
shapefiledata$NAME
co.est2019.alldata$CTYNAME
str_remove_all(co.est2019.alldata$CTYNAME, pattern = " County")
co.est2019.alldata$CTYNAME <- str_remove_all(co.est2019.alldata$CTYNAME, pattern = " County")
setdiff(co.est2019.alldata$CTYNAME, shapefiledata$NAME)
setdiff(shapefiledata$NAME, co.est2019.alldata$CTYNAME)
setdiff(co.est2019.alldata$CTYNAME, shapefiledata$NAME) #these are in first, but not second
setdiff(shapefiledata$NAME, co.est2019.alldata$CTYNAME) #these are in first, but not second
remove_1 <- setdiff(co.est2019.alldata$CTYNAME, shapefiledata$NAME)
remove_2 <- setdiff(shapefiledata$NAME, co.est2019.alldata$CTYNAME)
remove_1
which(co.est2019.alldata$CTYNAME == "Alexandria City")
remove_1
remove_2
str_remove_all(co.est2019.alldata$CTYNAME, pattern = " city")
co.est2019.alldata$CTYNAME <- str_remove_all(co.est2019.alldata$CTYNAME, pattern = " city")
remove_1 <- setdiff(co.est2019.alldata$CTYNAME, shapefiledata$NAME)
remove_2 <- setdiff(shapefiledata$NAME, co.est2019.alldata$CTYNAME)
remove_1
unique(co.est2019.alldata$STATE)
unique(co.est2019.alldata$STNAME)
state_names <- unique(co.est2019.alldata$STNAME)
co.est2019.alldata[which(co.est2019.alldata$CTYNAME) == state_names,]
co.est2019.alldata[co.est2019.alldata$CTYNAME == state_names,]
length(co.est2019.alldata[co.est2019.alldata$CTYNAME == state_names,])
co.est2019.alldata[co.est2019.alldata$CTYNAME == state_names,]
which(co.est2019.alldata$CTYNAME == "state_names")
which(co.est2019.alldata$CTYNAME == state_names)
state_names
which(co.est2019.alldata$CTYNAME == "Maryland")
which(co.est2019.alldata$CTYNAME == c(state_names))
which(co.est2019.alldata$CTYNAME == state_names)
which(co.est2019.alldata$CTYNAME == str_match(state_names))
which(co.est2019.alldata$CTYNAME == str_match(pattern = state_names))
which(co.est2019.alldata$CTYNAME == str_match(pattern = state_names, string = co.est2019.alldata$CTYNAME))
which(shapefiledata$NAME== "Petersburg")
which(co.est2019.alldata$COUNTY==0)
co.est2019.alldata[co.est2019.alldata$COUNTY==0,]
co.est2019.alldata[-co.est2019.alldata$COUNTY==0,]
co.est2019.alldata[-which(co.est2019.alldata$COUNTY==0),]
co.est2019.alldata <- co.est2019.alldata[-which(co.est2019.alldata$COUNTY==0),]
remove_1 <- setdiff(co.est2019.alldata$CTYNAME, shapefiledata$NAME)
remove_2 <- setdiff(shapefiledata$NAME, co.est2019.alldata$CTYNAME)
remove_1
remove_2
shapefiledata$STATEFP
shapefiledata$GEOID
shapefiledata$NAME
shapefiledata$STATEFP==1
shapefiledata$NAME=="Anchorage"
which(shapefiledata$NAME=="Anchorage")
shapefile_df <- as.data.frame(shapefiledata)
View(shapefile_df)
library(leaflet)
View(shapefile_df)
library(rgdal)
as.SpatialPolygons.PolygonsList(shapefiledata)
x <-  as.SpatialPolygons.PolygonsList(shapefiledata)
library(tidyverse)
shapefile_df[shapefile_df$STATEFP !=72,]
shapefile_df <- shapefile_df[shapefile_df$STATEFP !=72,]
setdiff(co.est2019.alldata$CTYNAME, shapefiledata_df$NAME) #these are in first, but not second
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$name) #these are in first, but not second
View(co.est2019.alldata)
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
remove_1 <- setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME)
setdiff(shapefile_df$NAME, co.est2019.alldata$CTYNAME) #these are in first, but not second
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
shapefile_df$NAME == "Aleutians West"
which(shapefile_df$NAME == "Aleutians West")
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
str_match("Parish", string = co.est2019.alldata$CTYNAME)
which(str_match("Parish", string = co.est2019.alldata$CTYNAME))
co.est2019.alldata[str_match("Parish", string = co.est2019.alldata$CTYNAME),]
co.est2019.alldata[str_detect("Parish", string = co.est2019.alldata$CTYNAME),]
str_detect("Parish", string = co.est2019.alldata$CTYNAME)
which(str_detect("Parish", string = co.est2019.alldata$CTYNAME))
co.est2019.alldata$CTYNAME[str_detect("Parish", string = co.est2019.alldata$CTYNAME),]
co.est2019.alldata[str_detect("Parish", string = co.est2019.alldata$CTYNAME),]
co.est2019.alldata$CTYNAME <- str_remove_all(co.est2019.alldata$CTYNAME, pattern = " Parish")
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
setdiff(shapefile_df$NAME, co.est2019.alldata$CTYNAME) #these are in first, but not second
co.est2019.alldata$CTYNAME <- str_remove_all(co.est2019.alldata$CTYNAME, pattern = " Census Area")
co.est2019.alldata$CTYNAME <- str_remove_all(co.est2019.alldata$CTYNAME, pattern = " Borough")
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
setdiff(shapefile_df$NAME, co.est2019.alldata$CTYNAME) #these are in first, but not second
# remove 'municipality' from cenus data
co.est2019.alldata$CTYNAME <- str_remove_all(co.est2019.alldata$CTYNAME, pattern = " Municipality")
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
co.est2019.alldata$CTYNAME[co.est2019.alldata$CTYNAME == "Juneau City and"] <- "Juneau"
co.est2019.alldata$CTYNAME[co.est2019.alldata$CTYNAME == "Sitka City and"] <- "Sitka"
co.est2019.alldata$CTYNAME[co.est2019.alldata$CTYNAME == "Wrangell City and"] <- "Wrangell"
co.est2019.alldata$CTYNAME[co.est2019.alldata$CTYNAME == "Yakutat City and"] <- "Yakutat"
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
setdiff(shapefile_df$NAME, co.est2019.alldata$CTYNAME) #these are in first, but not second
shapefile_df$NAME[shapefile_df$NAME=="DoÃ±a Ana"] <- "Doña Ana"
setdiff(co.est2019.alldata$CTYNAME, shapefile_df$NAME) #these are in first, but not second
setdiff(shapefile_df$NAME, co.est2019.alldata$CTYNAME) #these are in first, but not second
any(which(shapefile_df$NAME %in% co.est2019.alldata$CTYNAME))
any(which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME))
which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME)
co.est2019.alldata[which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME),]
which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME)
shapefile_df[which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME),]
shapefile_df[which(shapefile_df$NAME %in% co.est2019.alldata$CTYNAME),]
shapefile_df <- shapefile_df[which(shapefile_df$NAME %in% co.est2019.alldata$CTYNAME),]
which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME)
identical(co.est2019.alldata$CTYNAME, shapefile_df$NAME)
!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME
which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME)
any(which(!shapefile_df$NAME %in% co.est2019.alldata$CTYNAME))
library(sf)
library(rgdal)
shapefiledata <- SpatialPolygonsDataFrame(shapefile_df)
windows()
leaflet(shapefile_df) %>%
addPolygons()
View(shapefiledata)
?SpatialPolygonsDataFrame()
windows()
leaflet(shapefiledata) %>%
addPolygons(
fill = co.est2019.alldata$POPESTIMATE2019
)
windows()
leaflet(shapefiledata) %>%
addPolygons(
fillColor = factor(co.est2019.alldata$POPESTIMATE2019)
)
colnames(shapefile_df)[6] <- "county_name"
colnames(co.est2019.alldata)[7] <- "county_name"
merged_county_data <- inner_join(shapefile_df, co.est2019.alldata, by = "county_name")
View(merged_county_data)
innerk
?inner_join()
colnames(co.est2019.alldata)[4] <- "STATEFP"
by = c("county_name","STATEFP")
merged_county_data <- inner_join(shapefile_df, co.est2019.alldata,
by = c("county_name","STATEFP"))
typeof(shapefile_df$STATEFP)
typeof(co.est2019.alldata$STATEFP)
shapefile_df$STATEFP <- as.integer(shapefile_df$STATEFP)
merged_county_data <- inner_join(shapefile_df, co.est2019.alldata,
by = c("county_name","STATEFP"))
View(merged_county_data)
type.convert(shapefiledata)
str(shapefiledata)
?write.csv()
# writing merged data to csv
write.csv(merged_county_data, file = "merged_us_counties.csv")
memory.size()
memory.limit(size = 8192)
# i need to increase my memory_limit
memory.size()
?memory.limit()
memory.limit(size = 8192)
memory.limit(max = 8192)
memory.size(max = 8192)
# i need to increase my memory_limit
memory.limit()
memory.limit()
memory.size()
# this worked - i put the file in my wd
us_counties_json <- readOGR("us_counties_geojson.geojson")
library(rgdal)
library(rgdal)
# this worked - i put the file in my wd
us_counties_json <- readOGR("us_counties.geojson")
save.image("C:/Users/yungz/Desktop/Ben R/R Projects/US Counties and Population/US Counties/.RData")
library(leaflet)
#leaflet ----
pal <- colorNumeric("viridis", NULL)
us_counties_json$merged_us_counties_POPESTIMATE2019
options(viewer = NULL)
leaflet(us_counties_json) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(POPESTIMATE2019)))
options(viewer = NULL)
leaflet(us_counties_json) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(us_counties_json$merged_us_counties_POPESTIMATE2019)))
library(leaflet)
library(rgdal)
library(sf)
install.packages("geojsonio")
library(geojsonio)
?geojson_json()
View(merged_county_data)
merged_county_data[,c(1:14,25,36)]
#subsetting data I need - I only want 2019 pop estimates and change yoy
merged_county_data_geojson <- merged_county_data[,c(1:14,25,36)]
View(merged_county_data_geojson)
us_counties_json
View(us_counties_json)
us_counties_json@proj4string
#converting to geojson
merged_county_data_geojson <- geojson_json(merged_county_data_geojson, convert_wgs84 = TRUE)
library(tidyverse)
library(mapdata)
View(counties)
counties[,c(1:2, 5:6)]
counties <- counties[,c(1:2, 5:6)]
#I'll need to join the two by State Name and County - I'll match the counties df to the merged_counties_df
colnames(counties)[3] <- "STNAME"
colnames(counties)[4] <- "county_name"
library(stringi)
stri_trans_totitle(counties$STNAME)
counties$STNAME <-  stri_trans_totitle(counties$STNAME)
counties$county_name <- stri_trans_totitle(counties$county_name)
rm(merged_county_data_geojson)
#subsetting data I need - I only want 2019 pop estimates and change yoy
merged_county_data_copy <- merged_county_data[,c(1:14,25,36)]
# Joininng the two
merged_county_data_copy_2 <- inner_join(counties, merged_county_data_copy, by = c("county_name", "STNAME"))
View(merged_county_data_copy_2)
save.image("C:/Users/yungz/Desktop/Ben R/R Projects/US Counties and Population/US Counties/.RData")
